/*
	Fuzzy controler to control the agent's steerijng behavior
	creation: 01-aoct-2021 pierre.chevaillier@enib.fr inception
	comment: under development incomplete and not stable
*/

FUNCTION_BLOCK stateEstimator

// Define input variable
VAR_INPUT
	distance : REAL;
	direction : REAL;
  linearVelocity : REAL;
  angularVelocity : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
	mood : REAL;
END_VAR

// Fuzzify input variables 'distance' and 'direction':
FUZZIFY distance
	TERM near := (0, 1) (7, 0);
	TERM far := (0, 0) (7, 1)(20, 1);
END_FUZZIFY

FUZZIFY direction
	TERM backLeft := (-3.15, 1) (-2.356, 1) (-1.57, 0);
    TERM onTheLeft := (-2.356, 0) (-1.57, 1) (-0.785, 1) (0, 0);
	TERM ahead := (-0.785, 0) (0, 1) (0.785, 0);
    TERM onTheRight := (0, 0) (0.785, 1) (1.57, 1) (2.356, 0);
    TERM backRight := (1.57, 0) (2.356, 1) (3.15, 1);
END_FUZZIFY

FUZZIFY linearVelocity
	TERM stopped := (-0.1 ,1)(0, 1)(0.2, 0)
    TERM verySlow := (0, 0)(0.2,1) (0.5, 0);
    TERM slow := (0.2, 0) (0.5, 1) (1, 0);
    TERM fast := (0.5, 0) (1, 1) (1.5, 0);
    TERM veryFast := (1, 0) (1.5, 1) (2.1, 1);
END_FUZZIFY

// Defuzzify output variables
DEFUZZIFY mood
	TERM veryAngry := (-1, 0) (0, 1) (1, 0);
	TERM angry := (0, 0) (0.2, 1) (0.4, 0);
	TERM neutral := (0.4, 0) (0.5, 1) (0.6, 0);
    TERM cool := (0.8, 0) (1, 1) (1.2, 0);
	METHOD : COG; // Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0.5;	// Default value used if no rule activates defuzzifier
END_DEFUZZIFY

// Inference rules
RULEBLOCK No1
	AND : MIN;
	OR : MAX;
	ACT : PROD;	// Use 'min' activation method (implication: Larsen,  Mamdani ...)
	ACCU : MAX;	// Use 'max' accumulation method ("and_also")

	//iteration 1 
	/*
	RULE R1 : IF distance IS near and (linearVelocity IS veryFast OR linearVelocity IS fast) and direction IS ahead THEN mood IS veryAngry;
    RULE R2 : IF distance IS far and linearVelocity IS fast and (direction IS ahead OR direction IS onTheLeft OR direction IS onTheRight) THEN mood IS angry;
	RULE R6 : IF linearVelocity IS verySlow THEN mood IS cool;
	RULE R7 : IF linearVelocity IS slow THEN mood is neutral;
	*/

	//iteration 2
	/*
	RULE R1 : IF distance IS near and (linearVelocity IS veryFast OR linearVelocity IS fast) and direction IS ahead THEN mood IS veryAngry;
    RULE R2 : IF linearVelocity IS fast and (direction IS ahead OR direction IS onTheLeft OR direction IS onTheRight) THEN mood IS angry;
	RULE R6 : IF linearVelocity IS verySlow THEN mood IS cool;
	RULE R7 : IF linearVelocity IS slow THEN mood is neutral;
	*/

	//iteration 3
	RULE R1 : IF ((linearVelocity IS NOT stopped) OR (linearVelocity IS verySlow AND direction IS ahead ))AND distance IS near THEN mood IS veryAngry;
    RULE R2 : IF ((linearVelocity IS verySlow OR linearVelocity IS stopped) AND direction IS NOT ahead) OR distance IS far OR linearVelocity IS stopped THEN mood is cool;
END_RULEBLOCK

END_FUNCTION_BLOCK